// исходный текст программы сохранен в кодировке UTF-8 с сигнатурой

// elev.h
// заголовочный файл для программы «ELEV» (симулятор системы из нескольких лифтов
// в многоэтажном здании)

// Данный файл создан в процессе выполнения упражнения (проекта) 2 к главе 16
// учебника Лафоре. Задание из этого упражнения требует написания только лишь
// заголовочных файлов с объявлениями классов (интерфейс библиотеки классов)
// по диаграмме прецедентов и диаграмме классов. Поэтому данный код нельзя
// считать законченной программой, это всего лишь заготовка.

#include "msoftcon.h" // для функций консольной графики
#include "elev_app.h" // константы с количеством лифтов и этажей в здании

#include <iostream>
using namespace std;

class building; // предварительное объявление класса building, чтобы его можно
                // было использовать в описании класса elevator

class elevator  // класс, представляющий лифт
{
private:
	building* building_pointer;          // указатель на объект-здание
	int number;                          // номер лифта
	int current_floor;                   // текущий этаж (текущее местоположение)
	int moving_direction;                // направление движения
	bool destination_floors[NUM_FLOORS]; // массив этажей назначения
	int timer_loading;                   // таймер загрузки
	int timer_unloading;                 // таймер выгрузки
public:
	void car_tick1();                    // тик 1 кабины лифта
	void display();                      // отобразить кабину лифта на экране
	void action_selection();             // выбор следующего действия
	void car_tick2();                    // тик 2 кабины лифта
};

class building  // класс, представляющий многоэтажное здание
{
private:
	elevator* elevators[NUM_ELEVATORS];  // массив указателей на объекты-лифты
	int elev_counter;                    // счетчик созданных лифтов
	bool floor_requests[NUM_FLOORS][2];  // массив кнопок вызова лифта с этажей
public:
	building();                          // конструктор
	~building();                         // деструктор
	void master_tick();                  // главный тик
};