// исходный текст программы сохранен в кодировке UTF-8 с сигнатурой

// elev.h
// заголовочный файл для лифта — содержит описатели классов

// В играх и симуляторах существует понятие программной единицы времени, с помощью
// которой моделируется ход времени в игре (моделируемой системе). По-английски она
// называется «tick» (по-русски «такт»), я буду называть ее «тиком» по аналогии с
// тиканьем часов. Реальная продолжительность тика может быть разной в разных
// симуляторах. Она задается в программе, некоторые программы даже позволяют
// пользователю настраивать продолжительность тика под свои нужды.

// В названиях функций и классов здесь используются слова «elevator» (по-русски
// «лифт») и «car» (в данном контексте переводится на русский как «кабина»).
// Кабина лифта — это коробка, в которой едет пассажир, а понятие лифта
// включает в себя кабину лифта, тросы, на которых висит кабина, и механизм,
// поднимающий и опускающий кабину. В данном симуляторе понятия «лифт» и
// «кабина лифта» можно считать синонимами, так как здесь предполагается, что
// на один лифт приходится одна кабина.

// для использования небезопасной функции _itow
#define _CRT_SECURE_NO_WARNINGS

#include "elev_app.h"   // предоставляется клиентом (застройщиком)
#include "msoftcon.h"   // для консольной графики
#include <iostream>
#include <iomanip>      // для манипулятора setw
// #include <conio.h>   // для функций _kbhit, _getwch не понадобился
// #include <stdlib.h>  // для функций _itow, _wtoi не понадобился
// #include <process.h> // для функции exit не понадобился
using namespace std;

enum direction { UP, DN, STOP };
const int LOAD_TIME = 3;   // время посадки/высадки пассажира в/из лифта (в тиках)
const int SPACING = 7;     // расстояние между кабинами лифтов (в символах)
                           // (если лифт в здании один, это расстояние между
                           // номерами этажей на экране и кабиной лифта)
const int BUF_LENGTH = 80; // длина буфера вспомогательной строки

class building; // предварительное объявление класса, представляющего здание

class elevator  // класс, представляющий лифт
{
private:
	building* ptrBuilding;           // указатель на объект-здание
	int current_floor;               // текущий этаж (от 0 до nf-1)
	int old_floor;                   // с какого этажа прибыли (от 0 до nf-1)
	direction current_dir;           // направление, в котором движемся
	bool destination[NUM_FLOORS];    // этаж, на который едет пассажир
	int loading_timer;               // не равен нулю во время посадки пассажира
	int unloading_timer;             // не равен нулю во время высадки пассажира
public:
	elevator(building*);             // конструктор
	void car_tick1();                // тик 1 для лифта (выбор действия)
	void car_tick2();                // тик 2 для лифта (движение кабины)
	void car_display();              // отображение лифта на экране
	void dests_display() const;      // отображение метки этажа, куда едет пассажир
	void decide();                   // принятие решения о следующем действии
	void move();                     // движение лифта
	void get_destinations();         // получение номера конечного этажа
	int get_floor() const;           // получение номера текущего этажа
	direction get_direction() const; // получение текущего направления
};

class building  // класс, представляющий здание
{
private:
	elevator* car;                   // указатель на объект-кабину лифта
	                                   // массив кнопок вызова лифта «вверх/вниз»
	bool floor_request[2][NUM_FLOORS]; // (false = ВВЕРХ, true = ВНИЗ)
public:
	building();                      // конструктор
	~building();                     // деструктор
	void master_tick();              // главный тик, запускающий тики лифта
	int get_cars_floor() const;      // найти этаж, на котором находится лифт
	direction get_cars_dir() const;  // получить направление движения лифта
	                                 // проверка: есть ли указанный запрос с этажа
	bool get_floor_req(const int, const int) const;
	                                 // установка значения запросу с этажа
	void set_floor_req(const int, const int, const bool);
	void record_floor_reqs();        // получение запросов от пассажиров с этажей
	void show_floor_reqs() const;    // отображение на экране запросов с этажей
};